generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @unique @default(uuid())
  email            String           @unique
  username         String           @unique
  name             String?
  phoneNumber      String?
  profilePictureId String?
  about            String?
  password         String
  metaTitle        String?
  metaDescription  String?
  role             UserRole         @default(USER)
  articleAuthors   Article[]        @relation("ArticleAuthors")
  articleEditors   Article[]        @relation("ArticleEditors")
  articleComments  ArticleComment[] @relation("CommentAuthors")
  medias           Media[]          @relation("MediaAuthors")
  profilePicture   Media?           @relation("UserProfilePictures", fields: [profilePictureId], references: [id])
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model ArticleParent {
  id        String    @id @unique @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  locales   Article[] @relation("ArticleLocales")
}

model Article {
  id              String           @id @unique @default(uuid())
  language        LanguageType     @default(id_ID)
  title           String
  slug            String           @unique
  content         String
  excerpt         String
  metaTitle       String?
  metaDescription String?
  featuredImageId String
  featuredImage   Media            @relation(name: "ArticleFeaturedImages", fields: [featuredImageId], references: [id])
  articleParentId String
  articleParent   ArticleParent    @relation("ArticleLocales", fields: [articleParentId], references: [id])
  topics          Topic[]          @relation(name: "ArticleTopics")
  authors         User[]           @relation(name: "ArticleAuthors")
  editors         User[]           @relation(name: "ArticleEditors")
  comments        ArticleComment[] @relation(name: "ArticleComments")
  status          ArticleStatus    @default(PUBLISHED)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model TopicParent {
  id        String   @id @unique @default(uuid())
  locales   Topic[]  @relation("TopicLocales")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Topic {
  id              String       @id @unique @default(uuid())
  language        LanguageType @default(id_ID)
  title           String
  slug            String       @unique
  description     String?
  metaTitle       String?
  metaDescription String?
  type            TopicType    @default(ALL)
  topicParentId   String
  topicParent     TopicParent  @relation("TopicLocales", fields: [topicParentId], references: [id])
  featuredImageId String?
  featuredImage   Media?       @relation("TopicFeaturedImages", fields: [featuredImageId], references: [id])
  articles        Article[]    @relation(name: "ArticleTopics")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model ArticleComment {
  id        String   @id @unique @default(uuid())
  content   String
  article   Article  @relation(name: "ArticleComments", fields: [articleId], references: [id])
  articleId String
  author    User     @relation(name: "CommentAuthors", fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Media {
  id          String    @id @unique @default(uuid())
  name        String    @unique
  url         String    @unique
  type        String
  description String?
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation("MediaAuthors", fields: [authorId], references: [id])
  articles    Article[] @relation(name: "ArticleFeaturedImages")
  topics      Topic[]   @relation("TopicFeaturedImages")
  users       User[]    @relation("UserProfilePictures")
}


model Ad {
  id        String     @id @unique @default(uuid())
  title     String     @unique
  content   String
  position  AdPosition @default(HOME_BELOW_HEADER)
  type      AdType     @default(PLAIN_AD)
  active    Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Setting {
  id        String   @id @unique @default(uuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  USER
  PRO_USER
  AUTHOR
  ADMIN
}

enum ArticleStatus {
  PUBLISHED
  DRAFT
  REJECTED
  IN_REVIEW
}

enum TopicType {
  ALL
  ARTICLE
  REVIEW
  TUTORIAL
  MOVIE
  TV
  GAME
}

enum AdType {
  ADSENSE
  PLAIN_AD
}

enum AdPosition {
  HOME_BELOW_HEADER
  ARTICLE_BELOW_HEADER
  TOPIC_BELOW_HEADER
  SINGLE_ARTICLE_ABOVE_CONTENT
  SINGLE_ARTICLE_MIDDLE_CONTENT
  SINGLE_ARTICLE_BELOW_CONTENT
  SINGLE_ARTICLE_POP_UP
}

enum LanguageType {
  id_ID
  en_US
}
