generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String             @id @unique @default(uuid())
  email               String             @unique
  username            String             @unique
  name                String?
  phoneNumber         String?
  profilePictureId    String?
  about               String?
  password            String
  metaTitle           String?
  metaDescription     String?
  role                UserRole           @default(USER)
  articleAuthors      Article[]          @relation("ArticleAuthors")
  articleEditors      Article[]          @relation("ArticleEditors")
  articleComments     ArticleComment[]   @relation("CommentAuthors")
  downloadAuthors     Download[]         @relation("DownloadAuthors")
  downloadFileAuthors DownloadFile[]     @relation("DownloadFileAuthors")
  downloadComments    DownloadComment[]  @relation("DownloadCommentAuthors")
  topUpReviews        TopUpReview[]      @relation("TopUpReviewAuthors")
  topUpComments       TopUpReviewReply[] @relation("TopUpReviewReplyAuthors")
  topUpRatings        TopUpRating[]      @relation("TopUpRatingAuthors")
  medias              Media[]            @relation("MediaAuthors")
  profilePicture      Media?             @relation("UserProfilePictures", fields: [profilePictureId], references: [id])
  wpComments          WpComment[]        @relation("WpCommentAuthors")
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

model ArticlePrimary {
  id        String    @id @unique @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  articles  Article[] @relation("ArticleLocales")
}

model Article {
  id               String           @id @unique @default(uuid())
  language         LanguageType     @default(id_ID)
  title            String
  slug             String           @unique
  content          String
  excerpt          String
  metaTitle        String?
  metaDescription  String?
  featuredImageId  String
  featuredImage    Media            @relation(name: "ArticleFeaturedImages", fields: [featuredImageId], references: [id])
  articlePrimaryId String
  articlePrimary   ArticlePrimary   @relation("ArticleLocales", fields: [articlePrimaryId], references: [id])
  topics           Topic[]          @relation(name: "ArticleTopics")
  authors          User[]           @relation(name: "ArticleAuthors")
  editors          User[]           @relation(name: "ArticleEditors")
  comments         ArticleComment[] @relation(name: "ArticleComments")
  status           PostStatus       @default(PUBLISHED)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model TopicPrimary {
  id        String   @id @unique @default(uuid())
  topics    Topic[]  @relation("TopicLocales")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Topic {
  id              String       @id @unique @default(uuid())
  language        LanguageType @default(id_ID)
  title           String
  slug            String       @unique
  description     String?
  metaTitle       String?
  metaDescription String?
  type            TopicType    @default(ALL)
  topicPrimaryId  String
  topicPrimary    TopicPrimary @relation("TopicLocales", fields: [topicPrimaryId], references: [id])
  featuredImageId String?
  featuredImage   Media?       @relation("TopicFeaturedImages", fields: [featuredImageId], references: [id])
  articles        Article[]    @relation(name: "ArticleTopics")
  downloads       Download[]   @relation("DownloadTopics")
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model ArticleComment {
  id        String   @id @unique @default(uuid())
  content   String
  articleId String
  article   Article  @relation(name: "ArticleComments", fields: [articleId], references: [id])
  author    User     @relation(name: "CommentAuthors", fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Media {
  id            String         @id @unique @default(uuid())
  name          String         @unique
  url           String         @unique
  type          String
  description   String?
  authorId      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  author        User           @relation("MediaAuthors", fields: [authorId], references: [id])
  articles      Article[]      @relation(name: "ArticleFeaturedImages")
  downloads     Download[]     @relation("DownloadFeaturedImages")
  downloadFiles DownloadFile[] @relation("DownloadFileFeaturedImages")
  topics        Topic[]        @relation("TopicFeaturedImages")
  users         User[]         @relation("UserProfilePictures")
}

model Ad {
  id        String     @id @unique @default(uuid())
  title     String     @unique
  content   String
  position  AdPosition @default(HOME_BELOW_HEADER)
  type      AdType     @default(PLAIN_AD)
  active    Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Setting {
  id        String   @id @unique @default(uuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DownloadPrimary {
  id        String     @id @unique @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  downloads Download[] @relation("DownloadLocales")
}

model Download {
  id                String            @id @unique @default(uuid())
  language          LanguageType      @default(id_ID)
  title             String
  content           String
  excerpt           String
  slug              String            @unique
  metaTitle         String?
  metaDescription   String?
  featuredImageId   String
  developer         String
  operatingSystem   String
  license           String
  officialWeb       String
  schemaType        DownloadSchema    @default(DownloadApp)
  type              DownloadType      @default(app)
  status            PostStatus        @default(PUBLISHED)
  downloadPrimaryId String
  downloadPrimary   DownloadPrimary   @relation("DownloadLocales", fields: [downloadPrimaryId], references: [id])
  downloadComments  DownloadComment[] @relation("DownloadComments")
  authors           User[]            @relation("DownloadAuthors")
  featuredImage     Media             @relation("DownloadFeaturedImages", fields: [featuredImageId], references: [id])
  downloadFiles     DownloadFile[]    @relation("DownloadFilesToDownload")
  topics            Topic[]           @relation("DownloadTopics")
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model DownloadFile {
  id              String     @id @unique @default(uuid())
  title           String
  slug            String     @unique
  metaTitle       String?
  metaDescription String?
  featuredImageId String
  version         String
  downloadLink    String
  fileSize        String
  currency        String
  price           String
  status          PostStatus @default(PUBLISHED)
  authors         User[]     @relation("DownloadFileAuthors")
  featuredImage   Media      @relation("DownloadFileFeaturedImages", fields: [featuredImageId], references: [id])
  downloads       Download[] @relation("DownloadFilesToDownload")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model DownloadComment {
  id         String   @id @unique @default(uuid())
  content    String
  downloadId String
  download   Download @relation("DownloadComments", fields: [downloadId], references: [id])
  authorId   String
  author     User     @relation("DownloadCommentAuthors", fields: [authorId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Voucher {
  id                 String    @id @unique @default(uuid())
  name               String
  voucherCode        String    @unique
  discountPercentage Int
  discountMax        Int
  voucherAmount      Int
  description        String?
  expiration         DateTime?
  active             Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model ViewCounter {
  id        String   @id @unique @default(uuid())
  slug      String   @unique
  views     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TopUpReview {
  id        String             @id @unique @default(uuid())
  content   String
  brand     String
  authorId  String
  author    User               @relation("TopUpReviewAuthors", fields: [authorId], references: [id])
  ratings   TopUpRating[]      @relation("TopUpReviewRatings")
  replies   TopUpReviewReply[] @relation("TopUpReviewReplies")
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model TopUpReviewReply {
  id        String      @id @unique @default(uuid())
  content   String
  reviewId  String
  review    TopUpReview @relation(name: "TopUpReviewReplies", fields: [reviewId], references: [id])
  author    User        @relation(name: "TopUpReviewReplyAuthors", fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model TopUpRating {
  id        String      @id @unique @default(uuid())
  authorId  String
  author    User        @relation(name: "TopUpRatingAuthors", fields: [authorId], references: [id])
  rating    Int
  brand     String
  reviewId  String
  reviews   TopUpReview @relation(name: "TopUpReviewRatings", fields: [reviewId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model TopUpTransaction {
  id              String          @id @unique @default(uuid())
  invoiceId       String          @unique
  amount          Int
  sku             String
  accountId       String
  customerName    String?
  customerEmail   String?
  customerPhone   String
  voucherCode     String?
  discountAmount  Int?
  feeAmount       Int
  totalAmount     Int
  note            String?
  paymentMethod   String
  paymentStatus   PaymentStatus   @default(UNPAID)
  status          TopUpStatus     @default(PROCESSING)
  topUpProvider   TopUpProvider   @default(DIGIFLAZZ)
  paymentProvider PaymentProvider @default(TRIPAY)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model TopUpPriceList {
  id        String   @id @unique @default(uuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransactionCounter {
  id           String   @id @unique @default(uuid())
  brand        String   @unique
  transactions Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model WpComment {
  id         String   @id @unique @default(uuid())
  content    String
  wpPostSlug String
  authorId   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     User     @relation("WpCommentAuthors", fields: [authorId], references: [id])
}

enum UserRole {
  USER
  PRO_USER
  AUTHOR
  ADMIN
}

enum PostStatus {
  PUBLISHED
  DRAFT
  REJECTED
  IN_REVIEW
}

enum TopicType {
  ALL
  ARTICLE
  REVIEW
  TUTORIAL
  MOVIE
  TV
  GAME
}

enum AdType {
  ADSENSE
  PLAIN_AD
}

enum AdPosition {
  HOME_BELOW_HEADER
  ARTICLE_BELOW_HEADER
  TOPIC_BELOW_HEADER
  SINGLE_ARTICLE_ABOVE_CONTENT
  SINGLE_ARTICLE_MIDDLE_CONTENT
  SINGLE_ARTICLE_BELOW_CONTENT
  SINGLE_ARTICLE_POP_UP
}

enum DownloadType {
  app
  game
}

enum DownloadSchema {
  DownloadApp
  BusinessApp
  MultimediaApp
  MobileApp
  WebApp
  SocialNetworkingApp
  TravelApp
  ShoppingApp
  SportsApp
  LifeStyleApp
  DesignApp
  DeveloperApp
  DriverApp
  EducationalApp
  HealthApp
  FinanceApp
  SecurityApp
  BrowserApp
  CommunicationApp
  HomeApp
  UtilitiesApp
  RefereceApp
  GameApp
}

enum LanguageType {
  id_ID
  en_US
}

enum PaymentStatus {
  UNPAID
  PAID
  FAILED
  EXPIRED
  ERROR
  REFUNDED
}

enum TopUpStatus {
  PROCESSING
  SUCCESS
  FAILED
  ERROR
}

enum TopUpProvider {
  DIGIFLAZZ
  APIGAMES
}

enum PaymentProvider {
  DUITKU
  MIDTRANS
  TRIPAY
}
